# ---
# - hosts: localhost
#   # gather_facts: false

#   tasks:
    - name: Read node configuration
      include_vars:
        file: ../deploy_cluster/node_config.yaml
        name: node_config

    - name: Display node information
      debug:
        var: node_config

    - name: Initialize Docker stack configuration
      set_fact:
        docker_stack_configurations: {}
        nodes: []

    - name: Collect port
      loop: "{{ node_config.nodes | dict2items }}"
      loop_control:
        loop_var: node_item
      set_fact:
        nodes: "{{ nodes + [{
          'nid': node_item.key,
          'id': node_item.value.id,
          'port':  node_item.value.addr.split(':')[1] | int
        }] }}"
    - name: Add service for each node
      loop: "{{ nodes }}"
      loop_control:
        loop_var: node_item
      set_fact:
        docker_stack_configurations: "{{ docker_stack_configurations | combine({
          'node' ~ node_item.nid: {
            'image': 'wasm_serverless:v1',
            'deploy': {
              'mode': 'replicated',
              'replicas': 1,
              'placement': {
                'constraints': ['node.id == {}'.format(node_item.id)]
              }
            },
            'ports': [
              {'target': node_item.port, 'published': node_item.port, 'mode': 'host'},
              {'target': node_item.port + 1, 'published': node_item.port + 1, 'mode': 'host'}
            ],
            'volumes': ['/root/wasm_serverless_deploy:/etc/wasm_serverless/config'],
            'environment': {
              'WASM_SERVERLESS_NODEID': node_item.nid
            }
          }
        }) }}"

    - name: Warp Outter
      
      set_fact: 
        docker_stack_configurations: 
          networks:
            default:
              external: 
                name: host
          version: '3.5'
          services: "{{docker_stack_configurations}}"

    - name: Write the map to a YAML file
      shell: echo "{{ docker_stack_configurations | to_nice_yaml }}" > ../deploy_cluster/gen_docker_stack.yml

